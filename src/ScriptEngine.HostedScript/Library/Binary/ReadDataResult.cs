/*----------------------------------------------------------
This Source Code Form is subject to the terms of the 
Mozilla Public License, v.2.0. If a copy of the MPL 
was not distributed with this file, You can obtain one 
at http://mozilla.org/MPL/2.0/.
----------------------------------------------------------*/

//using System;
//using ScriptEngine.Machine;
//using ScriptEngine.Machine.Contexts;



///// <summary>
///// 
///// Содержит описание результата чтения данных из потока.
///// </summary>
//[ContextClass("РезультатЧтенияДанных", "ReadDataResult")]
//class ReadDataResult : AutoContext<ReadDataResult>
//{

//private int _MarkerIndex

//private bool _MarkerFound

//private int _Size

//public ReadDataResult()
//{
//}


///// <summary>
///// 
///// Индекс найденного маркера.
///// </summary>
///// <value>Число (Number)</value>
//[ContextProperty("ИндексМаркера", "MarkerIndex")]
//public int MarkerIndex
//{
//	get { return _MarkerIndex; }
	
//}


///// <summary>
///// 
///// Содержит признак обнаружения маркера:
///// 
/////  - Истина - если в процессе чтения данных был обнаружен маркер.
/////  - Ложь - если маркер не был найден или операция не предполагала поиска маркера.
///// </summary>
///// <value>Булево (Boolean)</value>
//[ContextProperty("МаркерНайден", "MarkerFound")]
//public bool MarkerFound
//{
//	get { return _MarkerFound; }
	
//}


///// <summary>
///// 
///// Размер данных в байтах. В некоторых случаях может быть равен нулю. Например, при чтении двоичных данных из конца потока или при разделении данных.
///// </summary>
///// <value>Число (Number)</value>
//[ContextProperty("Размер", "Size")]
//public int Size
//{
//	get { return _Size; }
	
//}


///// <summary>
///// 
///// Начать получение результата в виде буфера двоичных данных.
///// </summary>
/////
///// <param name="NotifyDescription">
///// Содержит описание процедуры, которая будет вызвана после завершения работы метода со следующими параметрами:
///// 
/////  - <Результат> - тип БуферДвоичныхДанных. Буфер, содержащий результат получения данных.
/////  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения. </param>

/////

/////
//[ContextMethod("НачатьПолучениеБуфераДвоичныхДанных", "BeginGetBinaryDataBuffer")]
//public void BeginGetBinaryDataBuffer( IValue NotifyDescription)
//{
	
//}


///// <summary>
///// 
///// Начинает получение результата чтения в виде двоичных данных.
///// </summary>
/////
///// <param name="NotifyDescription">
///// Содержит описание процедуры, которая будет вызвана после завершения работы метода со следующими параметрами:
///// 
/////  - <Результат> - тип ДвоичныеДанные. Результат получения данных,
/////  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения. </param>

/////

/////
//[ContextMethod("НачатьПолучениеДвоичныхДанных", "BeginGetBinaryData")]
//public void BeginGetBinaryData( IValue NotifyDescription)
//{
	
//}


///// <summary>
///// 
///// Открывает поток для чтения данных.
///// </summary>
/////

/////
///// <returns name="Stream">
///// Представляет собой поток данных, который можно последовательно читать и/или в который можно последовательно писать. 
///// Экземпляры объектов данного типа можно получить с помощью различных методов других объектов.</returns>

/////
//[ContextMethod("ОткрытьПотокДляЧтения", "OpenStreamForRead")]
//public IValue OpenStreamForRead()
//{
//	 return null;
//}


///// <summary>
///// 
///// Получает результат в виде буфера двоичных данных. Необходимо учитывать, что при этом данные будут полностью загружены в оперативную память. Если требуется избежать загрузки оперативной памяти, следует использовать другие методы получения двоичных данных.
///// </summary>
/////

/////
///// <returns name="BinaryDataBuffer">
///// Коллекция байтов фиксированного размера с возможностью произвольного доступа и изменения по месту.
///// Размер буфера формально не ограничен, но поскольку все данные буфера полностью находятся в оперативной памяти, при попытке создать буфер слишком большого размера доступной памяти может оказаться недостаточно, в результате чего будет вызвано исключение. Поэтому при работе с буферами двоичных данных необходимо соотносить их размер с доступным объемом оперативной памяти.
///// При создании буфера можно указать порядок байтов, который будет использован для операций с целыми числами. При этом если буфер не создан явно, а получен с помощью вызова метода другого объекта, то порядок байтов в полученном буфере будет унаследован от порядка байтов, заданного для того объекта, метод которого вызывается.
///// Например, если буфер получен с помощью вызова метода ПрочитатьВБуферДвоичныхДанных, то порядок байтов в полученном буфере будет равен значению свойства ПорядокБайтов.
///// Возможен также более сложный случай наследования порядка байтов. Если буфер получен с помощью вызова метода ПолучитьБуферДвоичныхДанных, то порядок байтов у полученного буфера будет выбираться из объекта ЧтениеДанных, из которого был получен объект РезультатЧтенияДанных. 
///// Порядок байтов, заданный для объекта ЧтениеДанных, будет использован во всех объектах, полученных на его основании.</returns>

/////
//[ContextMethod("ПолучитьБуферДвоичныхДанных", "GetBinaryDataBuffer")]
//public IValue GetBinaryDataBuffer()
//{
//	 return null;
//}


///// <summary>
///// 
///// Получает результат чтения в виде двоичных данных.
///// </summary>
/////

/////
///// <returns name="BinaryData">
///// Значение содержит двоичные данные, которые считываются из файла. Значение может быть сохранено в ХранилищеЗначения.
///// Хранимые данные могут быть записаны в файл.</returns>

/////
//[ContextMethod("ПолучитьДвоичныеДанные", "GetBinaryData")]
//public IValue GetBinaryData()
//{
//	 return null;
//}

//}
